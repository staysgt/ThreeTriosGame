Overall, their code was quite adaptable. There were a few things that were difficult
to adapt with our code. In their view implementation they had created two separate classes,
a grid panel and a hand panel. Although this differed from the way that we had our view designed, we
were still able to successfully adapt. In the model interface, they have an isGameOver and
isGameWon method. The isGameWon method is redundant to have, since it's value will always be equal
to isGameOver, since there are no cases in which a tie is possible. As well, in their implementation
they did not have a getBoard method (which we did have) that returned an unmodifiable version of the
board. Instead, they had methods like getGridWidth/Height and getCardAt to accomplish the same task.
Their design would have more efficient and easier to adapt had they included a getBoard method. We
also found that their code was very clean and easy to reuse.

The grid panel and hand panel classes did not have an access modifier assigned to them, so we needed
to ask the providers to add them in, in order to make their code adaptable to ours. The views that
they provided us with were capable. After adapting our model and views, we were able to get a final
version of their model that works with our controller (as much as our controller works, since we
currently only have it working with the machine players).

All of their code was very well documented, beyond just the required javadocs. Specifically in their
view implementation, they included multiple comments within the methods in order to clarify what
action was being performed. The only point where we found a problem was in the hand panel and grid
panel class where they forgot to add javadocs for the constructors, however it was clear what they
were meant to do without the comments. Because of these missing, we had to reach out to them asking
to add these comments in.


